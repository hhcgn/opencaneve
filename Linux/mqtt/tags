!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_OVERFLOW	MQTTClient.h	/^enum returnCode {DISCONNECTED = -3,  BUFFER_OVERFLOW = -2, FAILURE = -1, SUCCESS = 0 };$/;"	e	enum:returnCode
CC	Makefile	/^CC 		= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS 		= -Os$/;"	m
CONNACK	MQTTPacket/MQTTPacket.h	/^	CONNECT = 1, CONNACK, PUBLISH, PUBACK, PUBREC, PUBREL,$/;"	e	enum:msgTypes
CONNECT	MQTTPacket/MQTTPacket.h	/^	CONNECT = 1, CONNACK, PUBLISH, PUBACK, PUBREC, PUBREL,$/;"	e	enum:msgTypes
Client	MQTTClient.h	/^struct Client {$/;"	s
Client	MQTTClient.h	/^typedef struct Client Client;$/;"	t	typeref:struct:Client
Client	main.c	/^	Client Client;$/;"	m	struct:Cloud_MQTT_t	file:
Cloud_MQTT_t	main.c	/^struct  Cloud_MQTT_t$/;"	s	file:
ConnectNetwork	MQTTLinux.c	/^int ConnectNetwork(Network* n, char* addr, int port)$/;"	f
DISCONNECT	MQTTPacket/MQTTPacket.h	/^	PINGREQ, PINGRESP, DISCONNECT$/;"	e	enum:msgTypes
DISCONNECTED	MQTTClient.h	/^enum returnCode {DISCONNECTED = -3,  BUFFER_OVERFLOW = -2, FAILURE = -1, SUCCESS = 0 };$/;"	e	enum:returnCode
DLLExport	MQTTPacket/MQTTConnect.h	25;"	d
DLLExport	MQTTPacket/MQTTPacket.h	27;"	d
DLLExport	MQTTPacket/MQTTPacket.h	30;"	d
DLLExport	MQTTPacket/MQTTPacket.h	33;"	d
DLLExport	MQTTPacket/MQTTPublish.h	25;"	d
DLLExport	MQTTPacket/MQTTSubscribe.h	25;"	d
DLLExport	MQTTPacket/MQTTUnsubscribe.h	25;"	d
DLLImport	MQTTPacket/MQTTConnect.h	22;"	d
DLLImport	MQTTPacket/MQTTPacket.h	26;"	d
DLLImport	MQTTPacket/MQTTPacket.h	29;"	d
DLLImport	MQTTPacket/MQTTPacket.h	32;"	d
DLLImport	MQTTPacket/MQTTPublish.h	22;"	d
DLLImport	MQTTPacket/MQTTSubscribe.h	22;"	d
DLLImport	MQTTPacket/MQTTUnsubscribe.h	22;"	d
DataArrived_Cb	main.c	/^	pMessageArrived_Fun DataArrived_Cb;$/;"	m	struct:Cloud_MQTT_t	file:
DefaultClient	MQTTClient.h	93;"	d
FAILURE	MQTTClient.h	/^enum returnCode {DISCONNECTED = -3,  BUFFER_OVERFLOW = -2, FAILURE = -1, SUCCESS = 0 };$/;"	e	enum:returnCode
FUNC_ENTRY	MQTTPacket/StackTrace.h	25;"	d
FUNC_ENTRY	MQTTPacket/StackTrace.h	41;"	d
FUNC_ENTRY	MQTTPacket/StackTrace.h	53;"	d
FUNC_ENTRY_MAX	MQTTPacket/StackTrace.h	28;"	d
FUNC_ENTRY_MAX	MQTTPacket/StackTrace.h	44;"	d
FUNC_ENTRY_MAX	MQTTPacket/StackTrace.h	56;"	d
FUNC_ENTRY_MED	MQTTPacket/StackTrace.h	27;"	d
FUNC_ENTRY_MED	MQTTPacket/StackTrace.h	43;"	d
FUNC_ENTRY_MED	MQTTPacket/StackTrace.h	55;"	d
FUNC_ENTRY_NOLOG	MQTTPacket/StackTrace.h	26;"	d
FUNC_ENTRY_NOLOG	MQTTPacket/StackTrace.h	42;"	d
FUNC_ENTRY_NOLOG	MQTTPacket/StackTrace.h	54;"	d
FUNC_EXIT	MQTTPacket/StackTrace.h	29;"	d
FUNC_EXIT	MQTTPacket/StackTrace.h	45;"	d
FUNC_EXIT	MQTTPacket/StackTrace.h	57;"	d
FUNC_EXIT_MAX	MQTTPacket/StackTrace.h	32;"	d
FUNC_EXIT_MAX	MQTTPacket/StackTrace.h	48;"	d
FUNC_EXIT_MAX	MQTTPacket/StackTrace.h	60;"	d
FUNC_EXIT_MAX_RC	MQTTPacket/StackTrace.h	35;"	d
FUNC_EXIT_MAX_RC	MQTTPacket/StackTrace.h	51;"	d
FUNC_EXIT_MAX_RC	MQTTPacket/StackTrace.h	63;"	d
FUNC_EXIT_MED	MQTTPacket/StackTrace.h	31;"	d
FUNC_EXIT_MED	MQTTPacket/StackTrace.h	47;"	d
FUNC_EXIT_MED	MQTTPacket/StackTrace.h	59;"	d
FUNC_EXIT_MED_RC	MQTTPacket/StackTrace.h	34;"	d
FUNC_EXIT_MED_RC	MQTTPacket/StackTrace.h	50;"	d
FUNC_EXIT_MED_RC	MQTTPacket/StackTrace.h	62;"	d
FUNC_EXIT_NOLOG	MQTTPacket/StackTrace.h	30;"	d
FUNC_EXIT_NOLOG	MQTTPacket/StackTrace.h	46;"	d
FUNC_EXIT_NOLOG	MQTTPacket/StackTrace.h	58;"	d
FUNC_EXIT_RC	MQTTPacket/StackTrace.h	33;"	d
FUNC_EXIT_RC	MQTTPacket/StackTrace.h	49;"	d
FUNC_EXIT_RC	MQTTPacket/StackTrace.h	61;"	d
IOT_OBJS	Makefile	/^IOT_OBJS 	= $(wildcard $(SRC_PATH)\/*.c $(SRC_PATH)\/MQTTPacket\/*.c)$/;"	m
IOT_STATUS_CONNECT	mqtt.h	/^    IOT_STATUS_CONNECT,$/;"	e	enum:iot_ctrl_status_t
IOT_STATUS_DROP	mqtt.h	/^    IOT_STATUS_DROP,$/;"	e	enum:iot_ctrl_status_t
IOT_STATUS_LOGIN	mqtt.h	/^    IOT_STATUS_LOGIN,$/;"	e	enum:iot_ctrl_status_t
InitTimer	MQTTLinux.c	/^void InitTimer(Timer* timer)$/;"	f
IotStatus	main.c	/^	enum  IotCtrlStatus_t IotStatus;$/;"	m	struct:Iot_Device_Info_t	typeref:enum:Iot_Device_Info_t::IotCtrlStatus_t	file:
Iot_Device_Info_t	main.c	/^struct Iot_Device_Info_t$/;"	s	file:
Iot_Yield	main.c	/^void Iot_Yield(struct  Cloud_MQTT_t *pIot_mqtt)$/;"	f
Iot_mqtt	main.c	/^static struct  Cloud_MQTT_t Iot_mqtt;  $/;"	v	typeref:struct:Cloud_MQTT_t	file:
Iot_mqtt_init	main.c	/^void Iot_mqtt_init(struct  Cloud_MQTT_t *pIot_mqtt)$/;"	f
MAX_FAIL_ALLOWED	MQTTClient.h	26;"	d
MAX_MESSAGE_HANDLERS	MQTTClient.h	25;"	d
MAX_NO_OF_REMAINING_LENGTH_BYTES	MQTTPacket/MQTTPacket.c	59;"	d	file:
MAX_PACKET_ID	MQTTClient.h	24;"	d
MQTTCONNECT_H_	MQTTPacket/MQTTConnect.h	19;"	d
MQTTClient	MQTTClient.c	/^void MQTTClient(Client* c, Network* network, unsigned int command_timeout_ms, unsigned char* buf, size_t buf_size, unsigned char* readbuf, size_t readbuf_size)$/;"	f
MQTTConnackFlags	MQTTPacket/MQTTConnect.h	/^} MQTTConnackFlags;	\/**< connack flags byte *\/$/;"	t	typeref:union:__anon13
MQTTConnect	MQTTClient.c	/^int MQTTConnect(Client* c, MQTTPacket_connectData* options)$/;"	f
MQTTConnectFlags	MQTTPacket/MQTTConnect.h	/^} MQTTConnectFlags;	\/**< connect flags byte *\/$/;"	t	typeref:union:__anon8
MQTTDeserialize_ack	MQTTPacket/MQTTDeserializePublish.c	/^int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)$/;"	f
MQTTDeserialize_connack	MQTTPacket/MQTTConnectClient.c	/^int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)$/;"	f
MQTTDeserialize_connect	MQTTPacket/MQTTConnectServer.c	/^int MQTTDeserialize_connect(MQTTPacket_connectData* data, unsigned char* buf, int len)$/;"	f
MQTTDeserialize_publish	MQTTPacket/MQTTDeserializePublish.c	/^int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,$/;"	f
MQTTDeserialize_suback	MQTTPacket/MQTTSubscribeClient.c	/^int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)$/;"	f
MQTTDeserialize_subscribe	MQTTPacket/MQTTSubscribeServer.c	/^int MQTTDeserialize_subscribe(unsigned char* dup, unsigned short* packetid, int maxcount, int* count, MQTTString topicFilters[],$/;"	f
MQTTDeserialize_unsuback	MQTTPacket/MQTTUnsubscribeClient.c	/^int MQTTDeserialize_unsuback(unsigned short* packetid, unsigned char* buf, int buflen)$/;"	f
MQTTDeserialize_unsubscribe	MQTTPacket/MQTTUnsubscribeServer.c	/^int MQTTDeserialize_unsubscribe(unsigned char* dup, unsigned short* packetid, int maxcount, int* count, MQTTString topicFilters[],$/;"	f
MQTTDisconnect	MQTTClient.c	/^int MQTTDisconnect(Client* c)$/;"	f
MQTTFORMAT_H	MQTTPacket/MQTTFormat.h	18;"	d
MQTTFormat_toClientString	MQTTPacket/MQTTFormat.c	/^char* MQTTFormat_toClientString(char* strbuf, int strbuflen, unsigned char* buf, int buflen)$/;"	f
MQTTFormat_toServerString	MQTTPacket/MQTTFormat.c	/^char* MQTTFormat_toServerString(char* strbuf, int strbuflen, unsigned char* buf, int buflen)$/;"	f
MQTTHeader	MQTTPacket/MQTTPacket.h	/^} MQTTHeader;$/;"	t	typeref:union:__anon2
MQTTLenString	MQTTPacket/MQTTPacket.h	/^} MQTTLenString;$/;"	t	typeref:struct:__anon5
MQTTMessage	MQTTClient.h	/^struct MQTTMessage$/;"	s
MQTTMessage	MQTTClient.h	/^typedef struct MQTTMessage MQTTMessage;$/;"	t	typeref:struct:MQTTMessage
MQTTMessageArrived_Cb	main.c	/^static void MQTTMessageArrived_Cb(MessageData* md)$/;"	f	file:
MQTTPACKET_BUFFER_TOO_SHORT	MQTTPacket/MQTTPacket.h	/^	MQTTPACKET_BUFFER_TOO_SHORT = -2,$/;"	e	enum:errors
MQTTPACKET_H_	MQTTPacket/MQTTPacket.h	19;"	d
MQTTPACKET_READ_COMPLETE	MQTTPacket/MQTTPacket.h	/^	MQTTPACKET_READ_COMPLETE$/;"	e	enum:errors
MQTTPACKET_READ_ERROR	MQTTPacket/MQTTPacket.h	/^	MQTTPACKET_READ_ERROR = -1,$/;"	e	enum:errors
MQTTPUBLISH_H_	MQTTPacket/MQTTPublish.h	19;"	d
MQTTPacket_checkVersion	MQTTPacket/MQTTConnectServer.c	/^int MQTTPacket_checkVersion(MQTTString* protocol, int version)$/;"	f
MQTTPacket_connectData	MQTTPacket/MQTTConnect.h	/^} MQTTPacket_connectData;$/;"	t	typeref:struct:__anon12
MQTTPacket_connectData_initializer	MQTTPacket/MQTTConnect.h	124;"	d
MQTTPacket_decode	MQTTPacket/MQTTPacket.c	/^int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)$/;"	f
MQTTPacket_decodeBuf	MQTTPacket/MQTTPacket.c	/^int MQTTPacket_decodeBuf(unsigned char* buf, int* value)$/;"	f
MQTTPacket_decodenb	MQTTPacket/MQTTPacket.c	/^static int MQTTPacket_decodenb(MQTTTransport *trp)$/;"	f	file:
MQTTPacket_encode	MQTTPacket/MQTTPacket.c	/^int MQTTPacket_encode(unsigned char* buf, int length)$/;"	f
MQTTPacket_equals	MQTTPacket/MQTTPacket.c	/^int MQTTPacket_equals(MQTTString* a, char* bptr)$/;"	f
MQTTPacket_getName	MQTTPacket/MQTTFormat.c	/^const char* MQTTPacket_getName(unsigned short packetid)$/;"	f
MQTTPacket_len	MQTTPacket/MQTTPacket.c	/^int MQTTPacket_len(int rem_len)$/;"	f
MQTTPacket_names	MQTTPacket/MQTTFormat.c	/^const char* MQTTPacket_names[] =$/;"	v
MQTTPacket_read	MQTTPacket/MQTTPacket.c	/^int MQTTPacket_read(unsigned char* buf, int buflen, int (*getfn)(unsigned char*, int))$/;"	f
MQTTPacket_readnb	MQTTPacket/MQTTPacket.c	/^int MQTTPacket_readnb(unsigned char* buf, int buflen, MQTTTransport *trp)$/;"	f
MQTTPacket_willOptions	MQTTPacket/MQTTConnect.h	/^} MQTTPacket_willOptions;$/;"	t	typeref:struct:__anon11
MQTTPacket_willOptions_initializer	MQTTPacket/MQTTConnect.h	85;"	d
MQTTPublish	MQTTClient.c	/^int MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)$/;"	f
MQTTSUBSCRIBE_H_	MQTTPacket/MQTTSubscribe.h	19;"	d
MQTTSerialize_ack	MQTTPacket/MQTTSerializePublish.c	/^int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)$/;"	f
MQTTSerialize_connack	MQTTPacket/MQTTConnectServer.c	/^int MQTTSerialize_connack(unsigned char* buf, int buflen, unsigned char connack_rc, unsigned char sessionPresent)$/;"	f
MQTTSerialize_connect	MQTTPacket/MQTTConnectClient.c	/^int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)$/;"	f
MQTTSerialize_connectLength	MQTTPacket/MQTTConnectClient.c	/^int MQTTSerialize_connectLength(MQTTPacket_connectData* options)$/;"	f
MQTTSerialize_disconnect	MQTTPacket/MQTTConnectClient.c	/^int MQTTSerialize_disconnect(unsigned char* buf, int buflen)$/;"	f
MQTTSerialize_pingreq	MQTTPacket/MQTTConnectClient.c	/^int MQTTSerialize_pingreq(unsigned char* buf, int buflen)$/;"	f
MQTTSerialize_puback	MQTTPacket/MQTTSerializePublish.c	/^int MQTTSerialize_puback(unsigned char* buf, int buflen, unsigned short packetid)$/;"	f
MQTTSerialize_pubcomp	MQTTPacket/MQTTSerializePublish.c	/^int MQTTSerialize_pubcomp(unsigned char* buf, int buflen, unsigned short packetid)$/;"	f
MQTTSerialize_publish	MQTTPacket/MQTTSerializePublish.c	/^int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,$/;"	f
MQTTSerialize_publishLength	MQTTPacket/MQTTSerializePublish.c	/^int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)$/;"	f
MQTTSerialize_pubrel	MQTTPacket/MQTTSerializePublish.c	/^int MQTTSerialize_pubrel(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid)$/;"	f
MQTTSerialize_suback	MQTTPacket/MQTTSubscribeServer.c	/^int MQTTSerialize_suback(unsigned char* buf, int buflen, unsigned short packetid, int count, int* grantedQoSs)$/;"	f
MQTTSerialize_subscribe	MQTTPacket/MQTTSubscribeClient.c	/^int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,$/;"	f
MQTTSerialize_subscribeLength	MQTTPacket/MQTTSubscribeClient.c	/^int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])$/;"	f
MQTTSerialize_unsuback	MQTTPacket/MQTTUnsubscribeServer.c	/^int MQTTSerialize_unsuback(unsigned char* buf, int buflen, unsigned short packetid)$/;"	f
MQTTSerialize_unsubscribe	MQTTPacket/MQTTUnsubscribeClient.c	/^int MQTTSerialize_unsubscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid,$/;"	f
MQTTSerialize_unsubscribeLength	MQTTPacket/MQTTUnsubscribeClient.c	/^int MQTTSerialize_unsubscribeLength(int count, MQTTString topicFilters[])$/;"	f
MQTTSerialize_zero	MQTTPacket/MQTTConnectClient.c	/^int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)$/;"	f
MQTTString	MQTTPacket/MQTTPacket.h	/^} MQTTString;$/;"	t	typeref:struct:__anon6
MQTTStringFormat_ack	MQTTPacket/MQTTFormat.c	/^int MQTTStringFormat_ack(char* strbuf, int strbuflen, unsigned char packettype, unsigned char dup, unsigned short packetid)$/;"	f
MQTTStringFormat_connack	MQTTPacket/MQTTFormat.c	/^int MQTTStringFormat_connack(char* strbuf, int strbuflen, unsigned char connack_rc, unsigned char sessionPresent)$/;"	f
MQTTStringFormat_connect	MQTTPacket/MQTTFormat.c	/^int MQTTStringFormat_connect(char* strbuf, int strbuflen, MQTTPacket_connectData* data)$/;"	f
MQTTStringFormat_publish	MQTTPacket/MQTTFormat.c	/^int MQTTStringFormat_publish(char* strbuf, int strbuflen, unsigned char dup, int qos, unsigned char retained,$/;"	f
MQTTStringFormat_suback	MQTTPacket/MQTTFormat.c	/^int MQTTStringFormat_suback(char* strbuf, int strbuflen, unsigned short packetid, int count, int* grantedQoSs)$/;"	f
MQTTStringFormat_subscribe	MQTTPacket/MQTTFormat.c	/^int MQTTStringFormat_subscribe(char* strbuf, int strbuflen, unsigned char dup, unsigned short packetid, int count,$/;"	f
MQTTStringFormat_unsubscribe	MQTTPacket/MQTTFormat.c	/^int MQTTStringFormat_unsubscribe(char* strbuf, int strbuflen, unsigned char dup, unsigned short packetid,$/;"	f
MQTTString_initializer	MQTTPacket/MQTTPacket.h	87;"	d
MQTTSubscribe	MQTTClient.c	/^int MQTTSubscribe(Client* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)$/;"	f
MQTTTransport	MQTTPacket/MQTTPacket.h	/^}MQTTTransport;$/;"	t	typeref:struct:__anon7
MQTTUNSUBSCRIBE_H_	MQTTPacket/MQTTUnsubscribe.h	19;"	d
MQTTUnsubscribe	MQTTClient.c	/^int MQTTUnsubscribe(Client* c, const char* topicFilter)$/;"	f
MQTTVersion	MQTTPacket/MQTTConnect.h	/^	unsigned char MQTTVersion;$/;"	m	struct:__anon12
MQTTYield	MQTTClient.c	/^int MQTTYield(Client* c, int timeout_ms)$/;"	f
MQTT_BUF_SIZE	main.c	25;"	d	file:
MQTT_TOPIC_SIZE	main.c	24;"	d	file:
MQTTstrlen	MQTTPacket/MQTTPacket.c	/^int MQTTstrlen(MQTTString mqttstring)$/;"	f
MessageData	MQTTClient.h	/^struct MessageData$/;"	s
MessageData	MQTTClient.h	/^typedef struct MessageData MessageData;$/;"	t	typeref:struct:MessageData
MessageHandlers	MQTTClient.h	/^    struct MessageHandlers$/;"	s	struct:Client
Mqtt_Will_Msg_Set	main.c	/^int Mqtt_Will_Msg_Set(struct  Cloud_MQTT_t *pIot_mqtt, char *pbuf, int len)$/;"	f
NOSTACKTRACE	MQTTPacket/StackTrace.h	22;"	d
Network	MQTTLinux.h	/^struct Network$/;"	s
Network	MQTTLinux.h	/^typedef struct Network Network;$/;"	t	typeref:struct:Network
Network	main.c	/^	Network Network;$/;"	m	struct:Cloud_MQTT_t	file:
NewMessageData	MQTTClient.c	/^void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessgage) {$/;"	f
NewNetwork	MQTTLinux.c	/^void NewNetwork(Network* n)$/;"	f
PINGREQ	MQTTPacket/MQTTPacket.h	/^	PINGREQ, PINGRESP, DISCONNECT$/;"	e	enum:msgTypes
PINGRESP	MQTTPacket/MQTTPacket.h	/^	PINGREQ, PINGRESP, DISCONNECT$/;"	e	enum:msgTypes
PUBACK	MQTTPacket/MQTTPacket.h	/^	CONNECT = 1, CONNACK, PUBLISH, PUBACK, PUBREC, PUBREL,$/;"	e	enum:msgTypes
PUBCOMP	MQTTPacket/MQTTPacket.h	/^	PUBCOMP, SUBSCRIBE, SUBACK, UNSUBSCRIBE, UNSUBACK,$/;"	e	enum:msgTypes
PUBLISH	MQTTPacket/MQTTPacket.h	/^	CONNECT = 1, CONNACK, PUBLISH, PUBACK, PUBREC, PUBREL,$/;"	e	enum:msgTypes
PUBREC	MQTTPacket/MQTTPacket.h	/^	CONNECT = 1, CONNACK, PUBLISH, PUBACK, PUBREC, PUBREL,$/;"	e	enum:msgTypes
PUBREL	MQTTPacket/MQTTPacket.h	/^	CONNECT = 1, CONNACK, PUBLISH, PUBACK, PUBREC, PUBREL,$/;"	e	enum:msgTypes
PWD	Makefile	/^PWD 	:= `pwd`$/;"	m
QOS0	MQTTClient.h	/^enum QoS { QOS0, QOS1, QOS2 };$/;"	e	enum:QoS
QOS1	MQTTClient.h	/^enum QoS { QOS0, QOS1, QOS2 };$/;"	e	enum:QoS
QOS2	MQTTClient.h	/^enum QoS { QOS0, QOS1, QOS2 };$/;"	e	enum:QoS
QoS	MQTTClient.h	/^enum QoS { QOS0, QOS1, QOS2 };$/;"	g
SRC_PATH	Makefile	/^SRC_PATH 	:= .$/;"	m
STACKTRACE_H_	MQTTPacket/StackTrace.h	19;"	d
SUBACK	MQTTPacket/MQTTPacket.h	/^	PUBCOMP, SUBSCRIBE, SUBACK, UNSUBSCRIBE, UNSUBACK,$/;"	e	enum:msgTypes
SUBSCRIBE	MQTTPacket/MQTTPacket.h	/^	PUBCOMP, SUBSCRIBE, SUBACK, UNSUBSCRIBE, UNSUBACK,$/;"	e	enum:msgTypes
SUCCESS	MQTTClient.h	/^enum returnCode {DISCONNECTED = -3,  BUFFER_OVERFLOW = -2, FAILURE = -1, SUCCESS = 0 };$/;"	e	enum:returnCode
Sensor_Dat_t	main.c	/^}Sensor_Dat_t;$/;"	t	typeref:struct:__anon1	file:
Timer	MQTTLinux.h	/^struct Timer {$/;"	s
Timer	MQTTLinux.h	/^typedef struct Timer Timer;$/;"	t	typeref:struct:Timer
UNSUBACK	MQTTPacket/MQTTPacket.h	/^	PUBCOMP, SUBSCRIBE, SUBACK, UNSUBSCRIBE, UNSUBACK,$/;"	e	enum:msgTypes
UNSUBSCRIBE	MQTTPacket/MQTTPacket.h	/^	PUBCOMP, SUBSCRIBE, SUBACK, UNSUBSCRIBE, UNSUBACK,$/;"	e	enum:msgTypes
_MATT_H	mqtt.h	9;"	d
__MQTT_CLIENT_C_	MQTTClient.h	18;"	d
__MQTT_LINUX_	MQTTLinux.h	18;"	d
all	MQTTPacket/MQTTConnect.h	/^	unsigned char all;	\/**< all connack flags *\/$/;"	m	union:__anon13
all	MQTTPacket/MQTTConnect.h	/^	unsigned char all;	\/**< all connect flags *\/$/;"	m	union:__anon8
bits	MQTTPacket/MQTTConnect.h	/^	} bits;$/;"	m	union:__anon13	typeref:struct:__anon13::__anon14
bits	MQTTPacket/MQTTConnect.h	/^	} bits;$/;"	m	union:__anon13	typeref:struct:__anon13::__anon15
bits	MQTTPacket/MQTTConnect.h	/^	} bits;$/;"	m	union:__anon8	typeref:struct:__anon8::__anon10
bits	MQTTPacket/MQTTConnect.h	/^	} bits;$/;"	m	union:__anon8	typeref:struct:__anon8::__anon9
bits	MQTTPacket/MQTTPacket.h	/^	} bits;$/;"	m	union:__anon2	typeref:struct:__anon2::__anon3
bits	MQTTPacket/MQTTPacket.h	/^	} bits;$/;"	m	union:__anon2	typeref:struct:__anon2::__anon4
buf	MQTTClient.h	/^    unsigned char *buf;  $/;"	m	struct:Client
buf_size	MQTTClient.h	/^    size_t buf_size, readbuf_size;$/;"	m	struct:Client
bufchar	MQTTPacket/MQTTPacket.c	/^int bufchar(unsigned char* c, int count)$/;"	f
bufptr	MQTTPacket/MQTTPacket.c	/^static unsigned char* bufptr;$/;"	v	file:
byte	MQTTPacket/MQTTPacket.h	/^	unsigned char byte;	                \/**< the whole byte *\/$/;"	m	union:__anon2
cleansession	MQTTPacket/MQTTConnect.h	/^		unsigned int cleansession : 1;	  \/**< clean session flag *\/$/;"	m	struct:__anon8::__anon9
cleansession	MQTTPacket/MQTTConnect.h	/^		unsigned int cleansession : 1;	  \/**< cleansession flag *\/$/;"	m	struct:__anon8::__anon10
cleansession	MQTTPacket/MQTTConnect.h	/^	unsigned char cleansession;$/;"	m	struct:__anon12
clientID	MQTTPacket/MQTTConnect.h	/^	MQTTString clientID;$/;"	m	struct:__anon12
clientid	main.c	/^	char* clientid;$/;"	m	struct:opts_struct	file:
cloud_mqtt_thread	main.c	/^void *cloud_mqtt_thread(void *arg)$/;"	f
command_timeout_ms	MQTTClient.h	/^    unsigned int command_timeout_ms;$/;"	m	struct:Client
company	main.c	/^	char company[32];$/;"	m	struct:Iot_Device_Info_t	file:
countdown	MQTTLinux.c	/^void countdown(Timer* timer, unsigned int timeout)$/;"	f
countdown_ms	MQTTLinux.c	/^void countdown_ms(Timer* timer, unsigned int timeout)$/;"	f
cstring	MQTTPacket/MQTTPacket.h	/^	char* cstring;$/;"	m	struct:__anon6
ctx	MQTTLinux.h	/^	SSL_CTX *ctx;$/;"	m	struct:Network
cycle	MQTTClient.c	/^int cycle(Client* c, Timer* timer)$/;"	f
data	MQTTPacket/MQTTPacket.h	/^	char* data;$/;"	m	struct:__anon5
decodePacket	MQTTClient.c	/^int decodePacket(Client* c, int* value, int timeout)$/;"	f
defaultMessageHandler	MQTTClient.h	/^    void (*defaultMessageHandler) (MessageData*);$/;"	m	struct:Client
delimiter	main.c	/^	char* delimiter;$/;"	m	struct:opts_struct	file:
deliverMessage	MQTTClient.c	/^int deliverMessage(Client* c, MQTTString* topicName, MQTTMessage* message)$/;"	f
disconnect	MQTTLinux.h	/^	void (*disconnect) (Network*);$/;"	m	struct:Network
door	main.c	/^	Door_Dat_t	door;$/;"	m	struct:__anon1	file:
dup	MQTTClient.h	/^    char dup;$/;"	m	struct:MQTTMessage
dup	MQTTPacket/MQTTPacket.h	/^		unsigned int dup : 1;				\/**< DUP flag bit *\/$/;"	m	struct:__anon2::__anon3
dup	MQTTPacket/MQTTPacket.h	/^		unsigned int dup : 1;				\/**< DUP flag bit *\/$/;"	m	struct:__anon2::__anon4
end_time	MQTTLinux.h	/^	struct timeval end_time;$/;"	m	struct:Timer	typeref:struct:Timer::timeval
errors	MQTTPacket/MQTTPacket.h	/^enum errors$/;"	g
expired	MQTTLinux.c	/^char expired(Timer* timer)$/;"	f
fail_count	MQTTClient.h	/^    int fail_count;$/;"	m	struct:Client
fp	MQTTClient.h	/^        void (*fp) (MessageData*);$/;"	m	struct:Client::MessageHandlers
getLenStringLen	MQTTPacket/MQTTPacket.c	/^int getLenStringLen(char* ptr)$/;"	f
getNextPacketId	MQTTClient.c	/^int getNextPacketId(Client *c) {$/;"	f
get_file_size	main.c	/^int get_file_size(FILE *file)$/;"	f
getfn	MQTTPacket/MQTTPacket.h	/^	int (*getfn)(void *, unsigned char*, int); \/* must return -1 for error, 0 for call again, or the number of bytes read *\/$/;"	m	struct:__anon7
host	main.c	/^	char* host;$/;"	m	struct:opts_struct	file:
id	MQTTClient.h	/^    unsigned short id;$/;"	m	struct:MQTTMessage
inline	MQTTPacket/StackTrace.h	40;"	d
iot_ctrl_status_t	mqtt.h	/^enum iot_ctrl_status_t {$/;"	g
ipstack	MQTTClient.h	/^    Network* ipstack;$/;"	m	struct:Client
isTopicMatched	MQTTClient.c	/^char isTopicMatched(char* topicFilter, MQTTString* topicName)$/;"	f
isconnected	MQTTClient.h	/^    int isconnected;$/;"	m	struct:Client
keepAliveInterval	MQTTClient.h	/^    unsigned int keepAliveInterval;$/;"	m	struct:Client
keepAliveInterval	MQTTPacket/MQTTConnect.h	/^	unsigned short keepAliveInterval;$/;"	m	struct:__anon12
keepalive	MQTTClient.c	/^int keepalive(Client* c)$/;"	f
left_ms	MQTTLinux.c	/^int left_ms(Timer* timer)$/;"	f
len	MQTTPacket/MQTTPacket.h	/^	int len;$/;"	m	struct:__anon5
len	MQTTPacket/MQTTPacket.h	/^	int len;$/;"	m	struct:__anon7
lenstring	MQTTPacket/MQTTPacket.h	/^	MQTTLenString lenstring;$/;"	m	struct:__anon6
linux_disconnect	MQTTLinux.c	/^void linux_disconnect(Network* n)$/;"	f
linux_read	MQTTLinux.c	/^int linux_read(Network* n, unsigned char* buffer, int len, int timeout_ms)$/;"	f
linux_write	MQTTLinux.c	/^int linux_write(Network* n, unsigned char* buffer, int len, int timeout_ms)$/;"	f
mDEBUG	mqtt.h	27;"	d
message	MQTTClient.h	/^    MQTTMessage* message;$/;"	m	struct:MessageData
message	MQTTPacket/MQTTConnect.h	/^	MQTTString message;$/;"	m	struct:__anon11
messageHandler	MQTTClient.h	/^typedef void (*messageHandler)(MessageData*);$/;"	t
messageHandlers	MQTTClient.h	/^    } messageHandlers[MAX_MESSAGE_HANDLERS];      \/\/ Message handlers are indexed by subscription topic$/;"	m	struct:Client	typeref:struct:Client::MessageHandlers
min	MQTTPacket/MQTTConnectServer.c	21;"	d	file:
min	MQTTPacket/MQTTDeserializePublish.c	21;"	d	file:
model	main.c	/^	char model[5];$/;"	m	struct:Iot_Device_Info_t	file:
mqtt_buffer	main.c	/^	char mqtt_buffer[MQTT_BUF_SIZE];$/;"	m	struct:Cloud_MQTT_t	file:
mqtt_data_rx_cb	main.c	/^void  mqtt_data_rx_cb(void *pbuf,int len)$/;"	f
mqtt_data_write	main.c	/^int mqtt_data_write(char *pbuf, int len, char retain)$/;"	f
mqtt_device_connect	main.c	/^int mqtt_device_connect(struct  Cloud_MQTT_t *pIot_mqtt)$/;"	f
mqtt_device_disconnect	main.c	/^int  mqtt_device_disconnect(struct  Cloud_MQTT_t *pIot_mqtt)$/;"	f
mqtt_module_init	main.c	/^void mqtt_module_init(void)$/;"	f
mqtt_read_buffer	main.c	/^	char mqtt_read_buffer[MQTT_BUF_SIZE];$/;"	m	struct:Cloud_MQTT_t	file:
mqttread	MQTTLinux.h	/^	int (*mqttread) (Network*, unsigned char*, int, int);$/;"	m	struct:Network
mqttwrite	MQTTLinux.h	/^	int (*mqttwrite) (Network*, unsigned char*, int, int);$/;"	m	struct:Network
msgTypes	MQTTPacket/MQTTPacket.h	/^enum msgTypes$/;"	g
multiplier	MQTTPacket/MQTTPacket.h	/^	int multiplier;$/;"	m	struct:__anon7
my_socket	MQTTLinux.h	/^	int my_socket;$/;"	m	struct:Network
next_packetid	MQTTClient.h	/^    unsigned int next_packetid;$/;"	m	struct:Client
nodelimiter	main.c	/^	int nodelimiter;$/;"	m	struct:opts_struct	file:
opts	main.c	/^} opts =$/;"	v	typeref:struct:opts_struct
opts_struct	main.c	/^struct opts_struct$/;"	s	file:
pMessageArrived_Fun	mqtt.h	/^typedef void (*pMessageArrived_Fun)(void *, int len);$/;"	t
password	MQTTPacket/MQTTConnect.h	/^		unsigned int password : 1; 			\/**< 3.1 password *\/$/;"	m	struct:__anon8::__anon10
password	MQTTPacket/MQTTConnect.h	/^		unsigned int password : 1; 			\/**< 3.1 password *\/$/;"	m	struct:__anon8::__anon9
password	MQTTPacket/MQTTConnect.h	/^	MQTTString password;$/;"	m	struct:__anon12
password	main.c	/^	char* password;$/;"	m	struct:opts_struct	file:
payload	MQTTClient.h	/^    void *payload;$/;"	m	struct:MQTTMessage
payloadlen	MQTTClient.h	/^    size_t payloadlen;$/;"	m	struct:MQTTMessage
ping_outstanding	MQTTClient.h	/^    char ping_outstanding;$/;"	m	struct:Client
ping_timer	MQTTClient.h	/^    Timer ping_timer;$/;"	m	struct:Client
port	main.c	/^	int port;$/;"	m	struct:opts_struct	file:
pub_topic	main.c	/^	char pub_topic[MQTT_TOPIC_SIZE];$/;"	m	struct:Cloud_MQTT_t	file:
qos	MQTTClient.h	/^    enum QoS qos;$/;"	m	struct:MQTTMessage	typeref:enum:MQTTMessage::QoS
qos	MQTTPacket/MQTTConnect.h	/^	char qos;$/;"	m	struct:__anon11
qos	MQTTPacket/MQTTPacket.h	/^		unsigned int qos : 2;				\/**< QoS value, 0, 1 or 2 *\/$/;"	m	struct:__anon2::__anon3
qos	MQTTPacket/MQTTPacket.h	/^		unsigned int qos : 2;				\/**< QoS value, 0, 1 or 2 *\/$/;"	m	struct:__anon2::__anon4
qos	main.c	/^	enum QoS qos;$/;"	m	struct:opts_struct	typeref:enum:opts_struct::QoS	file:
readChar	MQTTPacket/MQTTPacket.c	/^char readChar(unsigned char** pptr)$/;"	f
readInt	MQTTPacket/MQTTPacket.c	/^int readInt(unsigned char** pptr)$/;"	f
readMQTTLenString	MQTTPacket/MQTTPacket.c	/^int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)$/;"	f
readPacket	MQTTClient.c	/^int readPacket(Client* c, Timer* timer) $/;"	f
readbuf	MQTTClient.h	/^    unsigned char *readbuf; $/;"	m	struct:Client
readbuf_size	MQTTClient.h	/^    size_t buf_size, readbuf_size;$/;"	m	struct:Client
rem_len	MQTTPacket/MQTTPacket.h	/^	int rem_len;$/;"	m	struct:__anon7
retain	MQTTPacket/MQTTPacket.h	/^		unsigned int retain : 1;		\/**< retained flag bit *\/$/;"	m	struct:__anon2::__anon3
retain	MQTTPacket/MQTTPacket.h	/^		unsigned int retain : 1;		\/**< retained flag bit *\/$/;"	m	struct:__anon2::__anon4
retained	MQTTClient.h	/^    char retained;$/;"	m	struct:MQTTMessage
retained	MQTTPacket/MQTTConnect.h	/^	unsigned char retained;$/;"	m	struct:__anon11
returnCode	MQTTClient.h	/^enum returnCode {DISCONNECTED = -3,  BUFFER_OVERFLOW = -2, FAILURE = -1, SUCCESS = 0 };$/;"	g
sck	MQTTPacket/MQTTPacket.h	/^	void *sck;	\/* pointer to whatever the system may use to identify the transport *\/$/;"	m	struct:__anon7
sendPacket	MQTTClient.c	/^int sendPacket(Client* c, int length, Timer* timer)$/;"	f
sessionpresent	MQTTPacket/MQTTConnect.h	/^		unsigned int sessionpresent : 1;    \/**< session present flag *\/$/;"	m	struct:__anon13::__anon14
sessionpresent	MQTTPacket/MQTTConnect.h	/^		unsigned int sessionpresent : 1;    \/**< session present flag *\/$/;"	m	struct:__anon13::__anon15
showtopics	main.c	/^	int showtopics;$/;"	m	struct:opts_struct	file:
ssl	MQTTLinux.h	/^	SSL *ssl;$/;"	m	struct:Network
state	MQTTPacket/MQTTPacket.h	/^	char state;$/;"	m	struct:__anon7
struct_id	MQTTPacket/MQTTConnect.h	/^	char struct_id[4];$/;"	m	struct:__anon11
struct_id	MQTTPacket/MQTTConnect.h	/^	char struct_id[4];$/;"	m	struct:__anon12
struct_version	MQTTPacket/MQTTConnect.h	/^	int struct_version;$/;"	m	struct:__anon11
struct_version	MQTTPacket/MQTTConnect.h	/^	int struct_version;$/;"	m	struct:__anon12
sub_topic	main.c	/^	char sub_topic[MQTT_TOPIC_SIZE];$/;"	m	struct:Cloud_MQTT_t	file:
targets	Makefile	/^targets = mqtt_demo$/;"	m
temphum	main.c	/^	TempHum_Dat_t temphum;$/;"	m	struct:__anon1	file:
topicFilter	MQTTClient.h	/^        const char* topicFilter;$/;"	m	struct:Client::MessageHandlers
topicName	MQTTClient.h	/^    MQTTString* topicName;$/;"	m	struct:MessageData
topicName	MQTTPacket/MQTTConnect.h	/^	MQTTString topicName;$/;"	m	struct:__anon11
type	MQTTPacket/MQTTPacket.h	/^		unsigned int type : 4;			\/**< message type nibble *\/$/;"	m	struct:__anon2::__anon3
type	MQTTPacket/MQTTPacket.h	/^		unsigned int type : 4;			\/**< message type nibble *\/$/;"	m	struct:__anon2::__anon4
username	MQTTPacket/MQTTConnect.h	/^		unsigned int username : 1;			\/**< 3.1 user name *\/$/;"	m	struct:__anon8::__anon10
username	MQTTPacket/MQTTConnect.h	/^		unsigned int username : 1;			\/**< 3.1 user name *\/$/;"	m	struct:__anon8::__anon9
username	MQTTPacket/MQTTConnect.h	/^	MQTTString username;$/;"	m	struct:__anon12
username	main.c	/^	char* username;$/;"	m	struct:opts_struct	file:
uuid	main.c	/^	char uuid[21];$/;"	m	struct:Iot_Device_Info_t	file:
waitfor	MQTTClient.c	/^int waitfor(Client* c, int packet_type, Timer* timer)$/;"	f
water	main.c	/^	Water_Dat_t water;$/;"	m	struct:__anon1	file:
will	MQTTPacket/MQTTConnect.h	/^		unsigned int will : 1;			    \/**< will flag *\/$/;"	m	struct:__anon8::__anon10
will	MQTTPacket/MQTTConnect.h	/^		unsigned int will : 1;			    \/**< will flag *\/$/;"	m	struct:__anon8::__anon9
will	MQTTPacket/MQTTConnect.h	/^	MQTTPacket_willOptions will;$/;"	m	struct:__anon12
will	main.c	/^	MQTTPacket_willOptions will;$/;"	m	struct:Cloud_MQTT_t	file:
willFlag	MQTTPacket/MQTTConnect.h	/^	unsigned char willFlag;$/;"	m	struct:__anon12
willFlag	main.c	/^	unsigned char willFlag;$/;"	m	struct:Cloud_MQTT_t	file:
willQoS	MQTTPacket/MQTTConnect.h	/^		unsigned int willQoS : 2;				\/**< will QoS value *\/$/;"	m	struct:__anon8::__anon10
willQoS	MQTTPacket/MQTTConnect.h	/^		unsigned int willQoS : 2;				\/**< will QoS value *\/$/;"	m	struct:__anon8::__anon9
willRetain	MQTTPacket/MQTTConnect.h	/^		unsigned int willRetain : 1;		\/**< will retain setting *\/$/;"	m	struct:__anon8::__anon10
willRetain	MQTTPacket/MQTTConnect.h	/^		unsigned int willRetain : 1;		\/**< will retain setting *\/$/;"	m	struct:__anon8::__anon9
will_topic	main.c	/^	char will_topic[MQTT_TOPIC_SIZE];$/;"	m	struct:Cloud_MQTT_t	file:
writeCString	MQTTPacket/MQTTPacket.c	/^void writeCString(unsigned char** pptr, const char* string)$/;"	f
writeChar	MQTTPacket/MQTTPacket.c	/^void writeChar(unsigned char** pptr, char c)$/;"	f
writeInt	MQTTPacket/MQTTPacket.c	/^void writeInt(unsigned char** pptr, int anInt)$/;"	f
writeMQTTString	MQTTPacket/MQTTPacket.c	/^void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)$/;"	f
zb_gateway	main.c	/^static struct Iot_Device_Info_t zb_gateway=$/;"	v	typeref:struct:Iot_Device_Info_t	file:
